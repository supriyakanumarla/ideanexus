{"ast":null,"code":"const express = require('express');\nconst User = require('../models/User'); // Correct relative path to the User model\nconst router = express.Router();\n\n// Update Profile Route\nrouter.put('/update', async (req, res) => {\n  const {\n    userId,\n    name,\n    email,\n    profilePicture,\n    bio\n  } = req.body;\n  if (!userId) {\n    return res.status(400).json({\n      message: 'User ID is required.'\n    });\n  }\n  try {\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({\n        message: 'User not found.'\n      });\n    }\n\n    // Update user fields\n    if (name) user.name = name;\n    if (email) user.email = email;\n    if (profilePicture) user.profilePicture = profilePicture;\n    if (bio) user.bio = bio;\n    await user.save();\n    res.status(200).json({\n      message: 'Profile updated successfully.',\n      user\n    });\n  } catch (error) {\n    console.error('Error updating profile:', error);\n    res.status(500).json({\n      message: 'Failed to update profile.',\n      error\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","User","router","Router","put","req","res","userId","name","email","profilePicture","bio","body","status","json","message","user","findById","save","error","console","module","exports"],"sources":["/home/rguktongole/Desktop/ideanexus/frontend/src/components/profilepage.js"],"sourcesContent":["const express = require('express');\nconst User = require('../models/User'); // Correct relative path to the User model\nconst router = express.Router();\n\n// Update Profile Route\nrouter.put('/update', async (req, res) => {\n  const { userId, name, email, profilePicture, bio } = req.body;\n\n  if (!userId) {\n    return res.status(400).json({ message: 'User ID is required.' });\n  }\n\n  try {\n    const user = await User.findById(userId);\n\n    if (!user) {\n      return res.status(404).json({ message: 'User not found.' });\n    }\n\n    // Update user fields\n    if (name) user.name = name;\n    if (email) user.email = email;\n    if (profilePicture) user.profilePicture = profilePicture;\n    if (bio) user.bio = bio;\n\n    await user.save();\n\n    res.status(200).json({ message: 'Profile updated successfully.', user });\n  } catch (error) {\n    console.error('Error updating profile:', error);\n    res.status(500).json({ message: 'Failed to update profile.', error });\n  }\n});\n\nmodule.exports = router;\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;AACxC,MAAME,MAAM,GAAGH,OAAO,CAACI,MAAM,CAAC,CAAC;;AAE/B;AACAD,MAAM,CAACE,GAAG,CAAC,SAAS,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEC,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC,cAAc;IAAEC;EAAI,CAAC,GAAGN,GAAG,CAACO,IAAI;EAE7D,IAAI,CAACL,MAAM,EAAE;IACX,OAAOD,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAuB,CAAC,CAAC;EAClE;EAEA,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMf,IAAI,CAACgB,QAAQ,CAACV,MAAM,CAAC;IAExC,IAAI,CAACS,IAAI,EAAE;MACT,OAAOV,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAkB,CAAC,CAAC;IAC7D;;IAEA;IACA,IAAIP,IAAI,EAAEQ,IAAI,CAACR,IAAI,GAAGA,IAAI;IAC1B,IAAIC,KAAK,EAAEO,IAAI,CAACP,KAAK,GAAGA,KAAK;IAC7B,IAAIC,cAAc,EAAEM,IAAI,CAACN,cAAc,GAAGA,cAAc;IACxD,IAAIC,GAAG,EAAEK,IAAI,CAACL,GAAG,GAAGA,GAAG;IAEvB,MAAMK,IAAI,CAACE,IAAI,CAAC,CAAC;IAEjBZ,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,+BAA+B;MAAEC;IAAK,CAAC,CAAC;EAC1E,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/Cb,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,2BAA2B;MAAEI;IAAM,CAAC,CAAC;EACvE;AACF,CAAC,CAAC;AAEFE,MAAM,CAACC,OAAO,GAAGpB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}