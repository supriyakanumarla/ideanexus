{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api'; // Base URL for your backend API\n\n/**\n * Fetch user details by ID.\n * @param {string} userId - The ID of the user.\n * @returns {Promise<Object>} The user's details.\n * @throws Will throw an error if the request fails.\n */\nexport const fetchUserDetails = async userId => {\n  try {\n    if (!userId) {\n      throw new Error('User ID is required to fetch user details.');\n    }\n    const response = await axios.get(`${API_URL}/user/profile/${userId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('Error fetching user details:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw new Error('Failed to fetch user details. Please try again later.');\n  }\n};\n\n/**\n * Update user details.\n * @param {string} userId - The ID of the user.\n * @param {Object} userDetails - Updated user data.\n * @returns {Promise<Object>} The updated user details.\n * @throws Will throw an error if the request fails.\n */\nexport const updateUserDetails = async (userId, userDetails) => {\n  try {\n    if (!userId) {\n      throw new Error('User ID is required to update user details.');\n    }\n    if (!userDetails || typeof userDetails !== 'object') {\n      throw new Error('Valid user details are required for the update.');\n    }\n    const response = await axios.put(`${API_URL}/user/profile/${userId}`, userDetails, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error('Error updating user details:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw new Error('Failed to update user details. Please try again later.');\n  }\n};","map":{"version":3,"names":["axios","API_URL","fetchUserDetails","userId","Error","response","get","data","error","_error$response","console","message","updateUserDetails","userDetails","put","headers","_error$response2"],"sources":["/home/rguktongole/Desktop/ideanexus/frontend/src/services/userservice.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api'; // Base URL for your backend API\n\n/**\n * Fetch user details by ID.\n * @param {string} userId - The ID of the user.\n * @returns {Promise<Object>} The user's details.\n * @throws Will throw an error if the request fails.\n */\nexport const fetchUserDetails = async (userId) => {\n    try {\n        if (!userId) {\n            throw new Error('User ID is required to fetch user details.');\n        }\n        const response = await axios.get(`${API_URL}/user/profile/${userId}`);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching user details:', error.response?.data || error.message);\n        throw new Error('Failed to fetch user details. Please try again later.');\n    }\n};\n\n/**\n * Update user details.\n * @param {string} userId - The ID of the user.\n * @param {Object} userDetails - Updated user data.\n * @returns {Promise<Object>} The updated user details.\n * @throws Will throw an error if the request fails.\n */\nexport const updateUserDetails = async (userId, userDetails) => {\n    try {\n        if (!userId) {\n            throw new Error('User ID is required to update user details.');\n        }\n        if (!userDetails || typeof userDetails !== 'object') {\n            throw new Error('Valid user details are required for the update.');\n        }\n        const response = await axios.put(`${API_URL}/user/profile/${userId}`, userDetails, {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error updating user details:', error.response?.data || error.message);\n        throw new Error('Failed to update user details. Please try again later.');\n    }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,MAAM,IAAK;EAC9C,IAAI;IACA,IAAI,CAACA,MAAM,EAAE;MACT,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;IACjE;IACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGL,OAAO,iBAAiBE,MAAM,EAAE,CAAC;IACrE,OAAOE,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA;IACZC,OAAO,CAACF,KAAK,CAAC,8BAA8B,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAIC,KAAK,CAACG,OAAO,CAAC;IACpF,MAAM,IAAIP,KAAK,CAAC,uDAAuD,CAAC;EAC5E;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,iBAAiB,GAAG,MAAAA,CAAOT,MAAM,EAAEU,WAAW,KAAK;EAC5D,IAAI;IACA,IAAI,CAACV,MAAM,EAAE;MACT,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;IAClE;IACA,IAAI,CAACS,WAAW,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;MACjD,MAAM,IAAIT,KAAK,CAAC,iDAAiD,CAAC;IACtE;IACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACc,GAAG,CAAC,GAAGb,OAAO,iBAAiBE,MAAM,EAAE,EAAEU,WAAW,EAAE;MAC/EE,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IACF,OAAOV,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAQ,gBAAA;IACZN,OAAO,CAACF,KAAK,CAAC,8BAA8B,EAAE,EAAAQ,gBAAA,GAAAR,KAAK,CAACH,QAAQ,cAAAW,gBAAA,uBAAdA,gBAAA,CAAgBT,IAAI,KAAIC,KAAK,CAACG,OAAO,CAAC;IACpF,MAAM,IAAIP,KAAK,CAAC,wDAAwD,CAAC;EAC7E;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}